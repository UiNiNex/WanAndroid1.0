package wanandroid.c03.jy.com.wanandroid;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import wanandroid.c03.jy.com.wanandroid.data.entity.CollectBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECT_BEAN".
*/
public class CollectBeanDao extends AbstractDao<CollectBean, Long> {

    public static final String TABLENAME = "COLLECT_BEAN";

    /**
     * Properties of entity CollectBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property HomeItemIsNew = new Property(2, String.class, "homeItemIsNew", false, "HOME_ITEM_IS_NEW");
        public final static Property HomeItemTag = new Property(3, String.class, "homeItemTag", false, "HOME_ITEM_TAG");
        public final static Property HomeIteAuthor = new Property(4, String.class, "homeIteAuthor", false, "HOME_ITE_AUTHOR");
        public final static Property HomeItemTime = new Property(5, String.class, "homeItemTime", false, "HOME_ITEM_TIME");
        public final static Property HomeItemPic = new Property(6, String.class, "homeItemPic", false, "HOME_ITEM_PIC");
        public final static Property HomeItemTitle = new Property(7, String.class, "homeItemTitle", false, "HOME_ITEM_TITLE");
        public final static Property HomeItemChapterName = new Property(8, String.class, "homeItemChapterName", false, "HOME_ITEM_CHAPTER_NAME");
    }


    public CollectBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CollectBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"HOME_ITEM_IS_NEW\" TEXT," + // 2: homeItemIsNew
                "\"HOME_ITEM_TAG\" TEXT," + // 3: homeItemTag
                "\"HOME_ITE_AUTHOR\" TEXT," + // 4: homeIteAuthor
                "\"HOME_ITEM_TIME\" TEXT," + // 5: homeItemTime
                "\"HOME_ITEM_PIC\" TEXT," + // 6: homeItemPic
                "\"HOME_ITEM_TITLE\" TEXT," + // 7: homeItemTitle
                "\"HOME_ITEM_CHAPTER_NAME\" TEXT);"); // 8: homeItemChapterName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserId());
 
        String homeItemIsNew = entity.getHomeItemIsNew();
        if (homeItemIsNew != null) {
            stmt.bindString(3, homeItemIsNew);
        }
 
        String homeItemTag = entity.getHomeItemTag();
        if (homeItemTag != null) {
            stmt.bindString(4, homeItemTag);
        }
 
        String homeIteAuthor = entity.getHomeIteAuthor();
        if (homeIteAuthor != null) {
            stmt.bindString(5, homeIteAuthor);
        }
 
        String homeItemTime = entity.getHomeItemTime();
        if (homeItemTime != null) {
            stmt.bindString(6, homeItemTime);
        }
 
        String homeItemPic = entity.getHomeItemPic();
        if (homeItemPic != null) {
            stmt.bindString(7, homeItemPic);
        }
 
        String homeItemTitle = entity.getHomeItemTitle();
        if (homeItemTitle != null) {
            stmt.bindString(8, homeItemTitle);
        }
 
        String homeItemChapterName = entity.getHomeItemChapterName();
        if (homeItemChapterName != null) {
            stmt.bindString(9, homeItemChapterName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserId());
 
        String homeItemIsNew = entity.getHomeItemIsNew();
        if (homeItemIsNew != null) {
            stmt.bindString(3, homeItemIsNew);
        }
 
        String homeItemTag = entity.getHomeItemTag();
        if (homeItemTag != null) {
            stmt.bindString(4, homeItemTag);
        }
 
        String homeIteAuthor = entity.getHomeIteAuthor();
        if (homeIteAuthor != null) {
            stmt.bindString(5, homeIteAuthor);
        }
 
        String homeItemTime = entity.getHomeItemTime();
        if (homeItemTime != null) {
            stmt.bindString(6, homeItemTime);
        }
 
        String homeItemPic = entity.getHomeItemPic();
        if (homeItemPic != null) {
            stmt.bindString(7, homeItemPic);
        }
 
        String homeItemTitle = entity.getHomeItemTitle();
        if (homeItemTitle != null) {
            stmt.bindString(8, homeItemTitle);
        }
 
        String homeItemChapterName = entity.getHomeItemChapterName();
        if (homeItemChapterName != null) {
            stmt.bindString(9, homeItemChapterName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CollectBean readEntity(Cursor cursor, int offset) {
        CollectBean entity = new CollectBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // homeItemIsNew
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // homeItemTag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // homeIteAuthor
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // homeItemTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // homeItemPic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // homeItemTitle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // homeItemChapterName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setHomeItemIsNew(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHomeItemTag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHomeIteAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHomeItemTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHomeItemPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHomeItemTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHomeItemChapterName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollectBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollectBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
